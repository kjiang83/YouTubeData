AsMean = mean(AtranSample)
out = list()
out$ASample = AtranSample
out$MinMax = c(min(AtranSample), max(AtranSample))
out$AsMean = AsMean
return(out)
}
CononSampling = function(n) {
CononSample = sample(15:45, n, replace = T)
CsMean = mean(CononSample)
out$ASample = CononSample
out$MinMax = c(min(CononSample), max(CononSample))
out$AsMean = CsMean
return(out)
}
AtranSampling(13)
CononSampling(13)
AtranSampling(13)
CononSampling(13)
CononSampling = function(n) {
CononSample = sample(15:45, n, replace = T)
CsMean = mean(CononSample)
out = list()
out$ASample = CononSample
out$MinMax = c(min(CononSample), max(CononSample))
out$AsMean = CsMean
return(out)
}
AtranSampling(13)
CononSampling(13)
AtranSampling(13)
CononSampling(13)
AtranSampling(13)
CononSampling(13)
AtranSampling(13)
CononSampling(13)
AtranSampling(13)
CononSampling(13)
AtranSampling(13)
CononSampling(13)
AtranSampling(13)
CononSampling(13)
AtranSampling(13)
CononSampling(13)
AtranSampling(13)
CononSampling(13)
# Original Data:
Atran = c(31,31,32,22,41,31,29,40,41,39,36,17,29)
Conon = c(18,26,16,20,14,28,18,27,17,32,19,17,28)
Atran_Mean = mean(Atran)
Conon_Mean = mean(Conon)
Combined_Mean = mean(Atran, Conon)
Combined_Set = cbind(Atran, Conon)
fixed(Combined_set)
fix(Combined_Set)
Combined_Mean = mean(Combined_Set)
Combined_Set = c(Atran, Conon)
fix(Combined_Set)
Combined_Mean = mean(Combined_Set)
Atran_Mean
Conon_Mean
Combined_Mean
aR = Atran - Atran_Mean
cR = Conon - Conon_Mean
aR2 = 13 * (aR)^2
sum(aR2)
cR2 = 13 * (cR)^2
sum(cR2)
# Parasite Counts for Salmon!
# Needed for Worksheet_Group2!!
Atran  = c(31,31,32,22,41,31,29,40,41,39,36,17,29)
Conon = c(18,26,16,20,14,28,18,27,17,32,19,17,28)
n1 = length(Atran)
n2 = length(Conon)
acData = c(Atran,Conon)
aMu = mean(Atran) # y1 bar
cMu = mean(Conon) # y2 bar
Mu = mean(acData) # y bar
Mu12Vec = c(rep(aMu,13),rep(cMu,13))
aR =(Atran - Mu)
aR2 = 13 * (aR^2)
sum(aR2)
cR = 13 * (Conon - Mu)
cR2 = 13 * cR^2
cR2
acR = c(aR,cR)
acR2 = c(aR2,cR2)
T1E = cbind(acData, Mu12Vec, acR, acR2)
TotalRow1 = c(sum(acData),
mean(acData),
sum(acR),
sum(acR2))
# SSR Computation!
T2E = cbind(c(aMu,cMu), rep(Mu,2),
c(n1*(aMu-Mu),n2*(cMu-Mu)),
c(n1*(aMu-Mu)^2,n2*(cMu-Mu)^2))
T2E
TotalRow2 = c(sum(T2E[,1]),Mu,sum(T2E[,3]),sum(T2E[,4]))
TotalRow2
# Combining both datasets into one:
# For ANOVA Table!
vStock = c(rep("Atran",length(Atran)),rep("Conon",length(Conon)))
vParasites = c(Atran, Conon)
Data = data.frame("Stock" = vStock, "Parasites" = vParasites)
fix(Data)
attach(Data)
fStock = factor(vStock, levels = c("Atran","Conon"))
model = aov(Parasites ~ Stock)
summary(model)
detach(Data)
model = aov(Parasites ~ Stock)
model
help(rep)
vStock = c(rep('Atran', length(Atran)), rep('Conon', length(Conon)))
vParasites = c(Atran, Conon)
Data = data.frame('Stock' = vStock, 'Parasites' = vParasites)
attach(Data)
model = aov(Parasites ~ Stock)
model
summary(model)
vStock = c(rep("Atran",length(Atran)),rep("Conon",length(Conon)))
vParasites = c(Atran, Conon)
Data = data.frame("Stock" = vStock, "Parasites" = vParasites)
fix(Data)
attach(Data)
fStock = factor(vStock, levels = c("Atran","Conon"))
model = aov(Parasites ~ Stock)
summary(model)
xBar = 20
s = 4
n = 24
mU = 22
t = (xBar - mU) / (s / sqrt(n))
t
qt(0.05, n - 1)
qt(0.025, n - 1)
xBar = 20
s = 4
n = 32
mU = 22
t = (xBar - mU) / (s / sqrt(n))
t
qt(0.05, n - 1)
x = c(886, 633, 943, 847, 934, 841, 1193, 820, 774, 834, 1050, 1058, 1192, 975, 1313, 872, 1079, 809)
t.test(x, mu = 1000, alternative = 'less', conf.level = 0.95)
t.test(x, mu = 1000, alternative = 'two.sided', conf.level = 0.95)
inData = c(1.0, 4.6, 5.4, 3.7, 5.2, 1.7, 6.1, 1.9, 7.6, 9.1, 6.9, 5.5, 9.0, 3.9, 2.5, 2.4, 4.7, 4.1, 3.7, 6.2)
t.test(inData, mu = 4.55, alternative = 'two.sided', conf.level = 0.95)
qt(0.05, 19)
length(inData)
Atran = c(31,31,32,22,41,31,29,40,41,39,36,17,29)
Conon = c(18,26,16,20,14,28,18,27,17,32,19,17,28)
# Statistical summary:
summary(Atran)
sd(Atran)
summary(Conon)
sd(Conon)
t.test(Atran, Conon, alternative = 'two.sided', mu = 0, var.equal = T)
t.test(Atran, Conon, alternative = 'two.sided', mu = 0, var.equal = T)
t.test(Atran, Conon, alternative = 'less', mu = 0, var.equal = F)
Securities = c(3.1,3.2,3.7,4.3,4.0,5.5,6.7,7.4,7.4,10.6)
Efficiency = c(98.1,94.7,92.0,89.8,87.5,85.0,82.0,77.8,72.1,53.5)
TaxEfficiency = cbind(Securities,Efficiency)
TaxEfficiency
model = lm(Efficiency ~ Securities)
model
sData = summary(model)
sData
alpha = 0.05
confint(model, conf.level = 1 - alpha)
CD = sData$coefficients
sData$coefficients
tVal = (model$coefficients[2]- 0) / CD[2, 2]
tVal
tQt = qt(1 - alpha / 2, sData$df[2])
tQt
tQt = qt((1 - alpha) / 2, sData$df[2])
tQt
tQt = qt(1 - alpha/2, sData$df[2])
tQt
help(mfrow)
help(mfrow())
help(par)
par(mfrow=c(2,2))
# First:
plot(Securities,Efficiency,col='purple',pch=19)
abline(model,col='red',lwd=2)
# Second:
plot(res,col='purple',pch=19,ylab="Residuals")
abline(h=0,col='red',lwd=2)
# Third:
qqnorm(res,col='purple',pch=19)
qqline(res,col='red',lwd=2)
# Fourth:
hist(res,freq=F,col='purple',ylim=c(0,0.2),xlab="Residuals",main="Hist. of Residuals")
lines(density(res),col='red',lwd=2)
a = seq(min(res)-2, max(res)+2, length = 1000)
lines(a,dnorm(a,mean(res),sd(res)),col='blue',lwd=2)
rm(list = ls())
plot(model, xlab = 'Speed (mph)', ylab = 'Stopping Distance (ft)', las = 1, pch = 19, col = 'purple')
model = lm(dist ~ speed)
model
data(cars)
fix(cars)
attach(cars)
model = lm(dist ~ speed)
model
par(mfrow = c(1, 2))
plot(speed, dist, xlab = 'Speed (mph)', ylab = 'Stopping Distance (ft)', las = 1, pch = 19, col = 'darkslategray3')
plot(model, xlab = 'Speed (mph)', ylab = 'Stopping Distance (ft)', las = 1, pch = 19, col = 'purple')
help(plot)
rm(list = ls())
help(confint)
DataX = c(418, 161, 217,  19, 244,
236, 216, 191, 521, 351,
339, 458, 475, 472, 445,
663, 401, 591, 315, 249,
560, 243, 209, 576, 288,
330, 526, 126, 394, 522)
t.test(DataX, mu = 350, alternative = 'two.sided', conf.int = 0.90)
qt(0.05, length(DataX) - 1)
DataX = c(418, 161, 217,  19, 244,
236, 216, 191, 521, 351,
339, 458, 475, 472, 445,
663, 401, 591, 315, 249,
560, 243, 209, 576, 288,
330, 526, 126, 394, 522)
DataY = c(239, 22, 472, 587, 254,
526, 405, 627, 388, 210,
596, 589, 528, 579, 404,
550, 199, 442, 330, 473,
246, 275, 627, 512, 530,
633, 593, 193, 610, 475)
t.test(DataX, DataY, alternative = 'greater', var.equal = F)
5.81/sqrt(13)
qt(0.06, 12)
qt(0.94, 12)
qt(0.95, 12)
qt(0.05, 12)
help(confint)
help(conf)
qt(0.95, 24)
20 - 1.71(3)
20 - 1.71 * 3
confint(20 ,level = 0.95)
qt(0.95, 24)
xBar = 20
s = 3
n = 25
t = (xBar - 0) / (s/sqrt(n))
t
rm(list=ls())
library(Stat2Data)
data(Hawks)
attach(Hawks)
install.packages("Stat2Data)
install.packages("Stat2Data")
library(Stat2Data)
install.packages("Stat2Data")
library(Stat2Data)
data(Hawks)
attach(Hawks)
fix(Hawks)
help(Hawks)
fix(Hawks)
sum(na.omit(Wing) == 413)
fix(Hawks)
Sex[na.omit(Wing) == 413]
Weight[na.omit(Wing) == 413]
Tail[na.omit(Wing) == 413]
AgeCH = Age[Species == 'CH']
MonthCH = Month[Species == 'CH']
SexCH = Sex[Species == 'CH']
MA = data.frame(AgeCH, MonthCH)
MAT = table(MA[, c('AgeCH', 'MonthCH')])
MAT
MS = data.frame(SexCH, MonthCH)
MST = table(MS[, c('SexCH', 'MonthCH')])
MST
summaryData = function(Data, alpha) {
n = length(na.omit(Data))
fivePtSum = summary(Data)
Min = fivePtSum[1]
Q1 = fivePtSum[2]
Q2 = fivePtSum[3]
Mean = mean(Data, na.rm = T)
Q3 = fivePtSum[5]
Max = fivePtSum[6]
SD = sd(Data, na.rm = T)
IQR = IQR(Data, na.rm = T)
SE = SD/sqrt(n)
ME = qt(1-(alpha/2), n - 1) * SE
LL = Mean - ME
UL = Mean + ME
outPut = list()
outPut$Sample_Size = n
outPut$Minimum = round(Min, 2)
outPut$Q1 = round(Q1, 2)
outPut$Q2 = round(Q2, 2)
outPut$Mean = round(Mean, 2)
outPut$Q3 = round(Q3, 2)
outPut$Max = round(Max, 2)
outPut$SD = round(SD, 2)
outPut$ME = round(ME,2)
outPut$Lower_Limit = round(LL,2)
outPut$Upper_Limit = round(UL,2)
return(outPut)
}
alpha = 0.05
# Wing Summary for all four variables for Cooper's Hawk species
WingCH = Wing[Species == 'CH']
CulmenCH = Culmen[Species == 'CH']
HalluxCH = Hallux[Species == 'CH']
STailCH = StandardTail[Species == 'CH']
WingCHV = summaryData(WingCH, alpha)
CulmenCHV = summaryData(CulmenCH, alpha)
HalluxCHV = summaryData(HalluxCH, alpha)
STailCHV = summarData(STailCH, alpha)
STailCHV = summaryData(STailCH, alpha)
StdCHV = summaryData(STailCH, alpha)
sMatrix = cbind(WingCHV,CulmenCHV,HalluxCHV,StdCHV)
colnames(sMatrix) = c("Wing","Culmen","Hallux","StandardTail")
rowNames = c("Sample Size","Minimum","First Quartile (Q1)","Second Quartile (Q2)",
"Mean","Third Quartile (Q3)","Maximum","Standard Deviation","IQR",
"Standard Error","Margin of Error","Lower 95% CI","Upper 95% CI")
summaryTable = data.frame(sMatrix,row.names=rowNames)
summaryTable
sMatrix = cbind(WingCHV,CulmenCHV,HalluxCHV,StdCHV)
colnames(sMatrix) = c("Wing","Culmen","Hallux","StandardTail")
rowNames = c("First Quartile (Q1)","Second Quartile (Q2)",
"Mean","Third Quartile (Q3)","Maximum","Standard Deviation","IQR",
"Standard Error","Margin of Error","Lower 95% CI","Upper 95% CI")
summaryTable = data.frame(sMatrix,row.names=rowNames)
summaryTable
sMatrix = cbind(WingCHV,CulmenCHV,HalluxCHV,StdCHV)
colnames(sMatrix) = c("Wing","Culmen","Hallux","StandardTail")
rowNames = c("Sample Size","Minimum", "First Quartile (Q1)","Second Quartile (Q2)",
"Mean","Third Quartile (Q3)","Maximum","Standard Deviation","IQR",
"Standard Error","Margin of Error","Lower 95% CI","Upper 95% CI")
summaryTable = data.frame(sMatrix,row.names=rowNames)
summaryTable
summaryData = function(Data, alpha) {
n = length(na.omit(Data))
fivePtSum = summary(Data)
Min = fivePtSum[1]
Q1 = fivePtSum[2]
Q2 = fivePtSum[3]
Mean = mean(Data, na.rm = T)
Q3 = fivePtSum[5]
Max = fivePtSum[6]
SD = sd(Data, na.rm = T)
IQR = IQR(Data, na.rm = T)
SE = SD/sqrt(n)
ME = qt(1-(alpha/2), n - 1) * SE
LL = Mean - ME
UL = Mean + ME
outPut = list()
outPut$Sample_Size = n
outPut$Minimum = round(Min, 2)
outPut$Q1 = round(Q1, 2)
outPut$Q2 = round(Q2, 2)
outPut$Mean = round(Mean, 2)
outPut$Q3 = round(Q3, 2)
outPut$Max = round(Max, 2)
outPut$SD = round(SD, 2)
outPut$IQR = round(IQR, 2)
outPut$SE = round(SE, 2)
outPut$ME = round(ME,2)
outPut$Lower_Limit = round(LL,2)
outPut$Upper_Limit = round(UL,2)
return(outPut)
}
WingCH = Wing[Species == 'CH']
CulmenCH = Culmen[Species == 'CH']
HalluxCH = Hallux[Species == 'CH']
STailCH = StandardTail[Species == 'CH']
WingCHV = summaryData(WingCH, alpha)
CulmenCHV = summaryData(CulmenCH, alpha)
HalluxCHV = summaryData(HalluxCH, alpha)
StdCHV = summaryData(STailCH, alpha)
sMatrix = cbind(WingCHV,CulmenCHV,HalluxCHV,StdCHV)
colnames(sMatrix) = c("Wing","Culmen","Hallux","StandardTail")
rowNames = c("Sample Size","Minimum", "First Quartile (Q1)","Second Quartile (Q2)",
"Mean","Third Quartile (Q3)","Maximum","Standard Deviation","IQR",
"Standard Error","Margin of Error","Lower 95% CI","Upper 95% CI")
summaryTable = data.frame(sMatrix,row.names=rowNames)
summaryTable
ightRTA = Weight[(Species == 'RT') & (Age == 'A')]
t.test(WeightRTA, alternative = 'greater', mu = 1140, conf.level = 0.95)
WeightRTA = Weight[(Species == 'RT') & (Age == 'A')]
t.test(WeightRTA, alternative = 'greater', mu = 1140, conf.level = 0.95)
t.test(WingCH, mu = 250, alternative = 'less', conf.level = 0.95)
help("t.test")
help(Hitters)
help("Hitters")
library(ISLR)
help(Hitters)
library(ISLR)
help(Hitters)
install.packages("readr")
summary(model)
# Parasite Counts for Salmon!
# Needed for Worksheet_Group2!!
Atran  = c(31,31,32,22,41,31,29,40,41,39,36,17,29)
Conon = c(18,26,16,20,14,28,18,27,17,32,19,17,28)
n1 = length(Atran)
n2 = length(Conon)
acData = c(Atran,Conon)
aMu = mean(Atran) # y1 bar
cMu = mean(Conon) # y2 bar
Mu = mean(acData) # y bar
Mu12Vec = c(rep(aMu,13),rep(cMu,13))
aR =(Atran - Mu)
aR2 = 13 * (aR^2)
sum(aR2)
cR = 13 * (Conon - Mu)
cR2 = 13 * cR^2
cR2
acR = c(aR,cR)
acR2 = c(aR2,cR2)
T1E = cbind(acData, Mu12Vec, acR, acR2)
TotalRow1 = c(sum(acData),
mean(acData),
sum(acR),
sum(acR2))
# SSR Computation!
T2E = cbind(c(aMu,cMu), rep(Mu,2),
c(n1*(aMu-Mu),n2*(cMu-Mu)),
c(n1*(aMu-Mu)^2,n2*(cMu-Mu)^2))
T2E
TotalRow2 = c(sum(T2E[,1]),Mu,sum(T2E[,3]),sum(T2E[,4]))
TotalRow2
# Combining both datasets into one:
# For ANOVA Table!
vStock = c(rep("Atran",length(Atran)),rep("Conon",length(Conon)))
vParasites = c(Atran, Conon)
Data = data.frame("Stock" = vStock, "Parasites" = vParasites)
fix(Data)
attach(Data)
fStock = factor(vStock, levels = c("Atran","Conon"))
model = aov(Parasites ~ Stock)
summary(model)
detach(Data)
library(tidyverse)
YouTubeData = read_csv("Data - YoutubeData_Cleaned_CSV.csv")
YouTubeData = read_csv("C:\Users\Kevin Jiang\Downloads\YouTubeData\Data - YoutubeData_Cleaned_CSV.csv")
YouTubeData = read_csv(r"C:\Users\Kevin Jiang\Downloads\YouTubeData\Data - YoutubeData_Cleaned_CSV.csv")
getwd()
setwd("C:\Users\Kevin Jiang\Downloads\YouTubeData")
setwd("C:\\Users\\Kevin Jiang\\Downloads\\YouTubeData")
getwd()
YouTubeData = read_csv("C:\\Users\\Kevin Jiang\\Downloads\\YouTubeData\\Data - YoutubeData_Cleaned_CSV.csv")
fix(YouTubeData)
fix(YouTubeData)
attach(YouTubeData)
help(aov)
fix(YouTubeData)
model = aov(Views_Normalized ~ Likes + Comments)
summary(model)
model2 = aov(Views_Normalized ~ Likes)
summary(model2)
model2
detach(YouTubeData)
# Parasite Counts for Salmon!
# Needed for Worksheet_Group2!!
Atran  = c(31,31,32,22,41,31,29,40,41,39,36,17,29)
Conon = c(18,26,16,20,14,28,18,27,17,32,19,17,28)
n1 = length(Atran)
n2 = length(Conon)
acData = c(Atran,Conon)
aMu = mean(Atran) # y1 bar
cMu = mean(Conon) # y2 bar
Mu = mean(acData) # y bar
Mu12Vec = c(rep(aMu,13),rep(cMu,13))
aR =(Atran - Mu)
aR2 = 13 * (aR^2)
sum(aR2)
cR = 13 * (Conon - Mu)
cR2 = 13 * cR^2
cR2
acR = c(aR,cR)
acR2 = c(aR2,cR2)
T1E = cbind(acData, Mu12Vec, acR, acR2)
TotalRow1 = c(sum(acData),
mean(acData),
sum(acR),
sum(acR2))
# SSR Computation!
T2E = cbind(c(aMu,cMu), rep(Mu,2),
c(n1*(aMu-Mu),n2*(cMu-Mu)),
c(n1*(aMu-Mu)^2,n2*(cMu-Mu)^2))
T2E
TotalRow2 = c(sum(T2E[,1]),Mu,sum(T2E[,3]),sum(T2E[,4]))
TotalRow2
# Combining both datasets into one:
# For ANOVA Table!
vStock = c(rep("Atran",length(Atran)),rep("Conon",length(Conon)))
vParasites = c(Atran, Conon)
Data = data.frame("Stock" = vStock, "Parasites" = vParasites)
fix(Data)
attach(Data)
fStock = factor(vStock, levels = c("Atran","Conon"))
model = aov(Parasites ~ Stock)
summary(model)
detach(Data)
model3 = lm(Views_Normalized ~ Likes)
print(model3)
YouTubeData = read_csv("C:\\Users\\Kevin Jiang\\Downloads\\YouTubeData\\Data - YoutubeData_Cleaned_CSV.csv")
fix(YouTubeData)
attach(YouTubeData)
model3 = lm(Views_Normalized ~ Likes)
print(model3)
